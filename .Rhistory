)
)
)
)
server <- function(input, output, session){
# Problem Statement
output$africa <- renderPlot({
africa_map
}, height = 570, width = 700)
output$rq_index <- renderPlotly({
index_plot
})
# Road Condition
output$kenya_roads <- renderLeaflet({
map
})
output$quality_donut <- renderPlotly({
donut_chart_plot(input$class)
})
output$surf_bar <- renderPlotly({
bar_chart_plot(input$class)
})
# Maintenance
react_road_type <- reactive({
roads %>%
filter(`Road Type` == input$surface)
})
observe({
freezeReactiveValue(input, "defect")
updateSelectInput(session, "defect", choices = react_road_type()$Defect_kind)
})
reactive_road_defect <- reactive({
react_road_type() %>%
filter(Defect_kind == input$defect)
})
observe({
freezeReactiveValue(input, "speed")
updateSelectInput(session, "speed", choices = reactive_road_defect()$Speed)
})
reactive_speed <- reactive({
reactive_road_defect() %>%
filter(Speed == input$speed)
})
output$maintenance_rec <- renderUI({
no_maint <- reactive_speed() %>%
as.data.frame() %>%
pull(Ranking) %>%
unique()
maint_num <- nrow(as.data.frame(reactive_speed()))
if (no_maint == "A") {
HTML(paste("Based on the provided information the severity of the road condition
could be classified as a", "<b>", reactive_speed()$Problem_extend, "</b>", "problem of",
"<b>", reactive_speed()$Ranking, "</b>", "type. As such, no maintenance
is recommended. However, extra monitoring efforts are desirable on this section of the road."))
} else if (no_maint != "A") {
if (maint_num == 1) {
HTML(paste("Based on the provided information the severity of the road condition
could be classified as a", "<b>", reactive_speed()$Problem_extend, "</b>", "problem of",
"<b>", reactive_speed()$Ranking, "</b>", "type. As such,", "<b>", reactive_speed()$`Kind of Maintenance`,
"maintenance", "</b>", "is recommended, which involves", reactive_speed()$`Suggested Actions`,
"."))
} else {
HTML(paste("Based on the provided information the severity of the road condition
could be classified as a", "<b>", unique(reactive_speed()$Problem_extend), "</b>", "problem of",
"<b>", unique(reactive_speed()$Ranking), "</b>", "type. As such, either", "<b>", as.data.frame(reactive_speed())[1, 8],
"or", as.data.frame(reactive_speed())[2, 8], "maintenance", "</b>", "is recommended.",
as.data.frame(reactive_speed())[1, 8], "maintenance involves",
as.data.frame(reactive_speed())[1, 7], ", while", as.data.frame(reactive_speed())[2, 8],
"maintenance involves", as.data.frame(reactive_speed())[2, 7], "."))
}
}
})
output$damage_photo <- renderImage({
list(
src = file.path("common_pavement_defects.jpg"),
contentType = "image/jpeg",
width = 750,
height = 310
)
}, deleteFile = FALSE)
}
shinyApp(ui = ui, server = server)
runApp('kenya_roads_app.R')
runApp('kenya_roads_app.R')
library(shiny); runApp('kenya_roads_app.R')
library(tidyverse)
library(httr)
# Get Country Codes
c_code <- GET("http://api.travelpayouts.com/data/en/countries.json")
c_code_resp <- jsonlite::fromJSON(rawToChar(c_code$content))
country_code_europe <- c_code_resp %>%
select(code:name) %>%
filter(name %in% c("Germany", "United Kingdom", "France", "Italy", "Spain",
"Ukraine", "Poland", "Romania", "Netherlands", "Belgium",
"Czech Republic", "Greece", "Portugal", "Sweden", "Hungary",
"Austria", "Serbia", "Switzerland", "Bulgaria", "Denmark",
"Finland", "Slovakia", "Norway", "Ireland", "Croatia",
"Moldova", "Bosnia and Herzegovina", "Albania", "Lithuania", "Slovenia",
"North Macedonia", "Latvia", "Estonia", "Montenegro", "Luxembourg",
"Malta", "Iceland", "Andorra", "Monaco", "Liechtenstein",
"San Marino", "Russia", "Belarus"))
europe_routes <- tibble(from_code = country_code_europe$code,
from_country = country_code_europe$name,
to_code = country_code_europe$code,
to_country = country_code_europe$name)
e1 <- europe_routes %>% select(from_code, from_country)
e2 <- europe_routes %>% select(to_code, to_country)
generated_routes <- expand.grid(europe_routes$from_code, europe_routes$to_code)
generated_routes <- generated_routes %>%
rename(from_code = Var1,
to_code = Var2)
routes_df_europe <- inner_join(generated_routes, e1, by = "from_code")
routes_df_europe <- inner_join(routes_df_europe, e2, by = "to_code")
c_code <- GET("http://api.travelpayouts.com/data/en/countries.json")
c_code_resp <- jsonlite::fromJSON(rawToChar(c_code$content))
country_code <- c_code_resp %>%
select(code:name) %>%
filter(name %in% c("Germany", "United Kingdom", "France", "Italy", "Spain",
"Ukraine", "Poland", "Romania", "Netherlands", "Belgium",
"Czech Republic", "Greece", "Portugal", "Sweden", "Hungary",
"Austria", "Serbia", "Switzerland", "Bulgaria", "Denmark",
"Finland", "Slovakia", "Norway", "Ireland", "Croatia",
"Moldova", "Bosnia and Herzegovina", "Albania", "Lithuania", "Slovenia",
"North Macedonia", "Latvia", "Estonia", "Montenegro", "Luxembourg",
"Malta", "Iceland", "Andorra", "Monaco", "Liechtenstein",
"San Marino", "Russia", "Belarus",
"China", "India", "Indonesia", "Pakistan", "Bangladesh",
"Japan", "Philippines", "Vietnam", "Turkey", "Iran",
"Thailand", "Myanmar", "South Korea", "Iraq", "Afghanistan",
"Saudi Arabia", "Uzbekistan", "Malaysia", "Yemen", "Nepal",
"North Korea", "Sri Lanka", "Kazakhstan", "Syria", "Cambodia",
"Jordan", "Azerbaijan", "United Arab Emirates", "Tajikistan", "Laos",
"Israel", "Lebanon", "Kyrgyzstan", "Turkmenistan", "Singapore",
"Oman", "Palestine", "Kuwait", "Georgia", "Mongolia",
"Armenia", "Qatar", "Bahrain", "Timor-Leste", "Cyprus",
"Bhutan", "Maldives", "Brunei", "Taiwan", "Hong Kong"))
country_code %>% filter(name == "China")
country_code %>% filter(code == "KH")
from <- tibble(from_code = country_code$code,
from_country = country_code$name)
to <- tibble(to_code = country_code$code,
to_country = country_code$name)
eur_asia_routes <- expand.grid(from$from_code, to$to_code)
eur_asia_routes <- eur_asia_routes %>%
rename(from_code = Var1,
to_code = Var2)
routes_df <- inner_join(eur_asia_routes, from, by = "from_code")
routes_df <- inner_join(routes_df, to, by = "to_code")
except_european <- anti_join(routes_df, routes_df_europe)
headers <- c('accept' = 'application/json',
'apikey' = 't_uvEgBs7jTHaNhuEb2BfFfCTEHJK343')
api_call_vital <- function(url) {
query <- GET(url, add_headers(.headers=headers))
resp <- jsonlite::fromJSON(rawToChar(query$content))
resp_df <- resp$data
tibble(flyFrom = resp_df$flyFrom,
flyTo = resp_df$flyTo,
cityFrom = resp_df$cityFrom,
cityTo = resp_df$cityTo,
countryFrom = resp_df$countryFrom$name,
countryTo = resp_df$countryTo$name,
distance = resp_df$distance,
durationDepatrure = resp_df$duration$departure,
durationReturn = resp_df$duration$return,
price_EUR = resp_df$conversion$EUR,
airlines = resp_df$airlines,
UTCarrival = resp_df$utc_arrival,
UTCdeparture = resp_df$utc_departure,
bookLink = resp_df$deep_link)
}
links_plane <- paste0("https://api.tequila.kiwi.com/v2/search?fly_from=", except_european$from_code,
"&fly_to=", except_european$to_code,
"&date_from=30%2F06%2F2023&date_to=30%2F12%2F2023&curr=EUR&vehicle_type=aircraft&limit=1000")
dataset_of_flights <- tibble()
for (i in 4825:length(links_plane)) {
data <- api_call_vital(links_plane[i])
Sys.sleep(2.0)
dataset_of_flights <- rbind(dataset_of_flights, data)
}
links_plane <- paste0("https://api.tequila.kiwi.com/v2/search?fly_from=", except_european$from_code,
"&fly_to=", except_european$to_code,
"&date_from=30%2F06%2F2023&date_to=30%2F12%2F2023&curr=EUR&vehicle_type=aircraft&limit=1000")
dim(dataset_of_flights)
tail(dataset_of_flights)
which(except_european$from_country == "Oman" & except_european$to_country == "Germany")
c1 <- dataset_of_flights
proc <- dataset_of_flights %>%
group_by(cityFrom, cityTo) %>%
slice(which.min(price_EUR))
proc %>%
group_by(cityFrom, cityTo) %>%
count() %>%
arrange(desc(n))
proc %>%
group_by(cityFrom, cityTo) %>%
count() %>%
filter(n > 1)
write_csv(proc, "/Users/miss_viktoriia/Documents/CheapTrip/kiwi_europe_asia_countries_filght_processed3.csv")
a <- read.csv("/Users/miss_viktoriia/Documents/CheapTrip/kiwi_europe_asia_countries_filght_processed2")
a <- read_csv("/Users/miss_viktoriia/Documents/CheapTrip/kiwi_europe_asia_countries_filght_processed2")
a <- read_csv("/Users/miss_viktoriia/Documents/CheapTrip/kiwi_europe_asia_countries_filght_processed2.csv")
head(a)
which(except_european$from_country == "Spain" & except_european$to_country == "Yemen")
tail(a)
which(except_european$from_country == "Switzerland" & except_european$to_country == "Mongolia")
write_csv(proc, "/Users/miss_viktoriia/Documents/CheapTrip/kiwi_europe_asia_countries_filght_processed4.csv")
tail(a)
which(except_european$from_country == "Switzerland" & except_european$to_country == "Mongolia")
head(dataset_of_flights)
which(except_european$from_country == "Germany" & except_european$to_country == "Kuwait")
a <- read_csv("/Users/miss_viktoriia/Documents/CheapTrip/kiwi_europe_asia_countries_filght_processed2.csv")
tail(a)
head(a)
which(except_european$from_country == "Spain" & except_european$to_country == "Yemen")
which(except_european$from_country == "Spain" & except_european$to_country == "South Korea")
dataset_of_flights <- tibble()
for (i in 3897:4824) {
data <- api_call_vital(links_plane[i])
Sys.sleep(2.0)
dataset_of_flights <- rbind(dataset_of_flights, data)
}
dim(dataset_of_flights)
head(dataset_of_flights)
proc <- dataset_of_flights %>%
group_by(cityFrom, cityTo) %>%
slice(which.min(price_EUR))
write_csv(proc, "/Users/miss_viktoriia/Documents/CheapTrip/kiwi_europe_asia_countries_filght_processed3.csv")
proc %>%
group_by(cityFrom, cityTo) %>%
count() %>%
filter(n > 1)
shiny::runApp()
install.packages("leaflet")
#install.packages("terra", repos = "https://rspatial.org/")
#install.packages("sf", repos="http://cran.rstudio.com/")
install.packages("units", repos="http://cran.rstudio.com/") libudunits2-dev
st_drivers()
sf::st_drivers()
sf::read_sf()
getwd()
a <- read_sf("data/kenya_roads/Kenya_roads_version2.shp")
a <- sf::read_sf("data/kenya_roads/Kenya_roads_version2.shp")
View(a)
runApp()
runApp()
a <- sf::st_read(system.file("data/kenya_roads/Kenya_roads_version2.shp", package="sf"))
getwd()
b <- sf::st_read("data/kenya_roads/Kenya_roads_version2.shp")
c <- st_read(system.file("data/kenya_roads/Kenya_roads_version2.shp", package="sf"))
c <- sf::st_read(system.file("data/kenya_roads/Kenya_roads_version2.shp", package="sf"))
?system.file()
#https://onedrive.live.com/?id=43BB5D68E9C33C9D%211111&cid=43BB5D68E9C33C9D
#
library(shiny); runApp('~/Documents/R_projects/ShinyApps/roads/kenya_roads_app.R')
getwd()
setwd("/Users/miss_viktoriia/Documents/R_projects/ShinyApps/roads")
getwd()
a<- sf::read_sf(unzip("exper_shp.zip"))
a<- unzip("exper_shp.zip")
a
b <- sf::read_sf("./__MACOSX/exper_shp/._Kenya_County_Boundaries.shp")
a[9]
b <- sf::read_sf(a[9])
b <- unzip("exper_shp.zip", list = TRUE)
View(b)
b
b$Name
url <- "https://onedrive.live.com/?cid=43BB5D68E9C33C9D&id=43BB5D68E9C33C9D%211724&parId=43BB5D68E9C33C9D%211111&o=OneUp"
temp_shapefile <- tempfile()
temp_shapefile
download.file(url, temp_shapefile)
temp_shapefile
unzip(temp_shapefile)
c <- sf::read_sf(a[9])
a[9]
a[10]
a[1]
a[2]
a[3]
a[4]
a[6]
a[8]
c <- sf::read_sf(a[8])
View(c)
d <- unzip("/var/folders/3x/3hmskxq57hsfkxh4yjqzhn_m0000gn/T//Rtmp3E9tSH/filedde8af79d4/exper_shp.zip")
getwd()
url_from <- "https://onedrive.live.com/?cid=43BB5D68E9C33C9D&id=43BB5D68E9C33C9D%211724&parId=43BB5D68E9C33C9D%211111&o=OneUp"
path_to <- "/Users/miss_viktoriia/Downloads/"
download.file(url_from, destfile = path_to)
path_to <- "/Users/miss_viktoriia/Downloads"
download.file(url_from, destfile = path_to)
sf::st_drivers(what = "vector")
url_git <- "https://github.com/OVI71397/Road-Maintenance/blob/main/data/Kenya_County_Boundaries/Kenya_County_Boundaries.shp"
sf::read_sf(url_git)
"data/Kenya_County_Boundaries/Kenya_County_Boundaries.shp"
url_git <- "https://github.com/OVI71397/Road-Maintenance/blob/2014a02d8e2db27784e8fa5d91a3c3a365630a2e/data/Kenya_County_Boundaries/Kenya_County_Boundaries.shp"
sf::read_sf(url_git)
url_git <- "https://github.com/OVI71397/Road-Maintenance/data/Kenya_County_Boundaries/Kenya_County_Boundaries.shp"
sf::read_sf(url_git)
download.file(url_git, destfile = path_to)
url_git <- "https://github.com/OVI71397/Road-Maintenance/blob/2014a02d8e2db27784e8fa5d91a3c3a365630a2e/data/Kenya_County_Boundaries/Kenya_County_Boundaries.shp"
download.file(url_git, destfile = path_to)
library(shiny); runApp('kenya_roads_app.R')
library(shiny)
library(shinyWidgets)
library(dplyr)
library(bslib)
library(leaflet)
library(maps)
library(mapproj)
library(plotly)
thematic::thematic_shiny()
roads <- readxl::read_excel("data/road maintenance routine.xlsx")
getwd()
getwd()
setwd("/Users/miss_viktoriia/Documents/Git_Road_Maintenance/Road-Maintenance")
roads <- readxl::read_excel("data/road maintenance routine.xlsx")
roads <- roads %>%
rename(Problem_extend = Defect...3,
Defect_kind = Defect...6)
roads$Ranking <- as.factor(roads$Ranking)
roads$Speed <- as.factor(roads$Speed)
roads$Problem_extend <- as.factor(roads$Problem_extend)
roads$`Problem Localisation` <- as.factor(roads$`Problem Localisation`)
roads$`Road Type` <- as.factor(roads$`Road Type`)
roads$Defect_kind <- as.factor(roads$Defect_kind)
roads$`Suggested Actions` <- as.factor(roads$`Suggested Actions`)
roads$`Kind of Maintenance` <- as.factor(roads$`Kind of Maintenance`)
roads$`Kind of Maintenance` <- recode_factor(roads$`Kind of Maintenance`,
None = "no")
# Problem Statement (data + chart)
kenya <- map_data("world") %>%
filter(region == c("Kenya"))
world <- map_data("world") %>%
filter(lat > -40) %>%
filter(lat < 40) %>%
filter(long > -20) %>%
filter(long < 55)
names <- world %>%
filter(region == c("Kenya", "South Africa",
"Namibia", "Angola",
"Tanzania", "Mali",
"Sudan", "Egypt",
"Niger", "Mauritania",
"Algeria", "Libya",
"Ethiopia", "Somalia",
"Uganda", "Nigeria",
"Ghana", "Guinea",
"Senegal", "Zambia",
"Central African Republic",
"Democratic Republic of the Congo",
"Madagascar", "Chad",
"Mozambique")) %>%
group_by(region) %>%
summarise(long = mean(long), lat = mean(lat))
africa_map <- world %>%
ggplot() +
geom_map(aes(x = long, y = lat, map_id = region),
fill = "#e7f5dc", color = "gray",
map = world) +
coord_map("ortho", orientation = c(0, 20, 0)) +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
geom_polygon(data = kenya, aes(x = long, y = lat, group = group),
fill = "#c0dfc2", color = "black") +
geom_text(aes(x = long, y = lat, label = region), data = names,  size = 4, hjust = 0.5) +
ylim(-35, 40)
africa_map
# Road Map (data + map)
kenya_network <- sf::st_read("/vsicurl/https://github.com/OVI71397/Road-Maintenance/raw/main/data/kenya_roads/Kenya_roads_version2.shp")
kenya_network$CLASS <- replace(kenya_network$CLASS,
is.na(kenya_network$CLASS),
"Unknown") %>%
as.factor()
kenya_network$TYPE <- replace(kenya_network$TYPE,
is.na(kenya_network$TYPE),
"Unknown") %>%
as.factor()
kenya_network$CONDITION <- replace(kenya_network$CONDITION,
is.na(kenya_network$CONDITION),
"Unknown") %>%
as.factor()
kenya_network <- kenya_network %>%
mutate(condition_reduc = recode_factor(kenya_network$CONDITION,
Excellent = "Good",
`Very Poor` = 'Poor'))
kenya_network <- kenya_network %>%
filter(TYPE != "230")
kenya_network$TYPE <- droplevels(kenya_network$TYPE, exclude = "230")
kenya_network$TYPE <- recode_factor(kenya_network$TYPE,
`Concrete (Jt-Plain)` = "Concrete",
`Concrete Block` = "Concrete",
Sand = "Earth",
`Set Stone` = "Gap")
primary <- kenya_network %>%
filter(CLASS == "Primary (Trunk)")
secondary <- kenya_network %>%
filter(CLASS == "Secondary (Main)")
tert <- kenya_network %>%
filter(CLASS == "Tertiary")
kenya_bound <- sf::st_read("/vsicurl/https://github.com/OVI71397/Road-Maintenance/raw/main/data/Kenya_County_Boundaries/Kenya_County_Boundaries.shp")
map <- leaflet(kenya_network) %>%
addTiles() %>%
setView(36.906, 0.4, zoom = 6) %>%
#fitBounds(lng1 = 33.4, lat1 = -4.8, lng2 = 41.4, lat2 = 5.3) %>%
addLegend(position = "bottomright",
pal = quality_pal,
values = ~kenya_network$condition_reduc,
opacity = 0.9,
title = paste("<small>Road Condition
<br><em>click on the road to see info</em></small>")) %>%
addLayersControl(
position = "topright",
overlayGroups = c("Primary (Trunk) Road Network",
"Secondary (Main) Road Network",
"Tertiary Road Network"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("Secondary (Main) Road Network",
"Tertiary Road Network")) %>%
addPolygons(data = kenya_bound, color = "#F8F9FB",
opacity = 0.3,
fillColor = "#F8F9FB",
fillOpacity = 0.8) %>%
addPolylines(data = primary,
weight = 3,
group = "Primary (Trunk) Road Network",
color = ~quality_pal(primary$condition_reduc),
opacity = 1,
popup = paste("<b>", primary$ROADNO, "road", "</b>",
"<br> Length:", "<b>", primary$LENGTHKM, "km", "</b>",
"<br> Width:", "<b>", primary$WIDTH, "m", "</b>",
"<br> Lanes:", "<b>", primary$LANES, "</b>",
"<br> Pavement Type:", "<b>", primary$TYPE, "</b>")) %>%
addPolylines(data = secondary,
weight = 2,
group = "Secondary (Main) Road Network",
color = ~quality_pal(secondary$condition_reduc),
opacity = 1,
popup = paste("<b>", secondary$ROADNO, "road", "</b>",
"<br> Length:", "<b>", secondary$LENGTHKM, "km", "</b>",
"<br> Width:", "<b>", secondary$WIDTH, "m", "</b>",
"<br> Lanes:", "<b>", secondary$LANES, "</b>",
"<br> Pavement Type:", "<b>", secondary$TYPE, "</b>")) %>%
addPolylines(data = tert,
weight = 1,
group = "Tertiary Road Network",
color = ~quality_pal(tert$condition_reduc),
opacity = 1,
popup = paste("<b>", tert$ROADNO, "road", "</b>",
"<br> Length:", "<b>", tert$LENGTHKM, "km", "</b>",
"<br> Width:", "<b>", tert$WIDTH, "m", "</b>",
"<br> Lanes:", "<b>", tert$LANES, "</b>",
"<br> Pavement Type:", "<b>", tert$TYPE, "</b>"))
quality_pal <- colorFactor(palette = c("#B2AB2E", "#ED413E", "#686461", "#CFCBC8"),
domain = kenya_network$condition_reduc,
na.color = "#CFCBC8")
map <- leaflet(kenya_network) %>%
addTiles() %>%
setView(36.906, 0.4, zoom = 6) %>%
#fitBounds(lng1 = 33.4, lat1 = -4.8, lng2 = 41.4, lat2 = 5.3) %>%
addLegend(position = "bottomright",
pal = quality_pal,
values = ~kenya_network$condition_reduc,
opacity = 0.9,
title = paste("<small>Road Condition
<br><em>click on the road to see info</em></small>")) %>%
addLayersControl(
position = "topright",
overlayGroups = c("Primary (Trunk) Road Network",
"Secondary (Main) Road Network",
"Tertiary Road Network"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("Secondary (Main) Road Network",
"Tertiary Road Network")) %>%
addPolygons(data = kenya_bound, color = "#F8F9FB",
opacity = 0.3,
fillColor = "#F8F9FB",
fillOpacity = 0.8) %>%
addPolylines(data = primary,
weight = 3,
group = "Primary (Trunk) Road Network",
color = ~quality_pal(primary$condition_reduc),
opacity = 1,
popup = paste("<b>", primary$ROADNO, "road", "</b>",
"<br> Length:", "<b>", primary$LENGTHKM, "km", "</b>",
"<br> Width:", "<b>", primary$WIDTH, "m", "</b>",
"<br> Lanes:", "<b>", primary$LANES, "</b>",
"<br> Pavement Type:", "<b>", primary$TYPE, "</b>")) %>%
addPolylines(data = secondary,
weight = 2,
group = "Secondary (Main) Road Network",
color = ~quality_pal(secondary$condition_reduc),
opacity = 1,
popup = paste("<b>", secondary$ROADNO, "road", "</b>",
"<br> Length:", "<b>", secondary$LENGTHKM, "km", "</b>",
"<br> Width:", "<b>", secondary$WIDTH, "m", "</b>",
"<br> Lanes:", "<b>", secondary$LANES, "</b>",
"<br> Pavement Type:", "<b>", secondary$TYPE, "</b>")) %>%
addPolylines(data = tert,
weight = 1,
group = "Tertiary Road Network",
color = ~quality_pal(tert$condition_reduc),
opacity = 1,
popup = paste("<b>", tert$ROADNO, "road", "</b>",
"<br> Length:", "<b>", tert$LENGTHKM, "km", "</b>",
"<br> Width:", "<b>", tert$WIDTH, "m", "</b>",
"<br> Lanes:", "<b>", tert$LANES, "</b>",
"<br> Pavement Type:", "<b>", tert$TYPE, "</b>"))
map
readxl::read_excel()
getwd()
